const { ApiPromise, WsProvider } = require('@polkadot/api');
const client = require('prom-client');
const axios = require('axios');

const TARGET_AUTHORITY = '{{ avail.validator.grandpa_authority_id }}';
const PUSHGATEWAY_URL = 'http://{{ monitor_server_dns }}:9091';
const JOB_NAME = 'chain_exporter';

async function main() {
  try {
    const provider = new WsProvider('ws://localhost:{{ avail.validator.ports.rpc_port }}');
    const api = await ApiPromise.create({ provider });

    const grandpa = await api.query.grandpa.authorities();

    let isTargetFound = false;

    if (grandpa && grandpa.length > 0) {
      grandpa.forEach(([id]) => {
        const idHex = id.toString();
        if (idHex.toLowerCase() === TARGET_AUTHORITY.toLowerCase()) {
          isTargetFound = true;
        }
      });
    }

    const result = isTargetFound ? 1 : 0;

    // Setup Prometheus Gauge metric
    const registry = new client.Registry();
    const matchMetric = new client.Gauge({
      name: 'substrate_node_authority_role',
      help: 'Whether the target GRANDPA authority was found (1 = yes, 0 = no)',
      labelNames: ['authority', 'env', 'project'],
    });

    // Example label values
    const labels = {
      authority: TARGET_AUTHORITY,
      env: '{{ env }}',
      project: '{{ project }}',
    };

    matchMetric.set(labels, result);
    registry.registerMetric(matchMetric);

    // Push to Pushgateway
    await axios.post(
      `${PUSHGATEWAY_URL}/metrics/job/${JOB_NAME}`,
      await registry.metrics(),
      { headers: { 'Content-Type': 'text/plain' } }
    );

    console.log('✅ Metrics successfully pushed to Pushgateway.');
    await api.disconnect();
  } catch (err) {
    console.error('❌ Error connecting to Substrate node or pushing metric:', err);
    process.exit(1);
  }
}

main();
